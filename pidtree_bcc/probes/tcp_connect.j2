{%- import 'utils.j2' as utils -%}
#include <net/sock.h>
#include <bcc/proto.h>

BPF_HASH(currsock, u32, struct sock *);
BPF_PERF_OUTPUT(events);

struct connection_t {
    u32 pid;
    u32 daddr;
    u32 saddr;
    u16 dport;
};

{{ utils.net_filter_trie_init(NET_FILTER_MAP_NAME, PORT_FILTER_MAP_NAME, max_ports=NET_FILTER_MAX_PORT_RANGES) }}

int kprobe__tcp_v4_connect(struct pt_regs *ctx, struct sock *sk)
{
    u32 pid = bpf_get_current_pid_tgid();
    currsock.update(&pid, &sk);
    return 0;
};

int kretprobe__tcp_v4_connect(struct pt_regs *ctx)
{
    int ret = PT_REGS_RC(ctx);
    u32 pid = bpf_get_current_pid_tgid();

    struct sock **skpp;
    skpp = currsock.lookup(&pid);
    if (skpp == 0) return 0; // not there!
    if (ret != 0) {
        // failed to sync
        currsock.delete(&pid);
        return 0;
    }

    struct sock *skp = *skpp;
    u32 saddr = 0, daddr = 0;
    u16 dport = 0;
    bpf_probe_read(&daddr, sizeof(daddr), &skp->__sk_common.skc_daddr);
    bpf_probe_read(&dport, sizeof(dport), &skp->__sk_common.skc_dport);
    dport = ntohs(dport);

    if (is_addr_port_filtered(daddr, dport) || is_port_globally_filtered(dport)) {
        currsock.delete(&pid);
        return 0;
    }

    bpf_probe_read(&saddr, sizeof(saddr), &skp->__sk_common.skc_rcv_saddr);

    struct connection_t connection = {};
    connection.pid = pid;
    connection.dport = dport;
    connection.daddr = daddr;
    connection.saddr = saddr;

    events.perf_submit(ctx, &connection, sizeof(connection));

    currsock.delete(&pid);

    return 0;
}
