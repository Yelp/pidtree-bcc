{% macro get_proto_func() -%}
static u8 get_socket_protocol(struct sock *sk)
{
    // I'd love to be the one to have figured this out, I'm not
    // https://github.com/iovisor/bcc/blob/v0.16.0/tools/tcpaccept.py#L115
    u8 protocol;
    int gso_max_segs_offset = offsetof(struct sock, sk_gso_max_segs);
    int sk_lingertime_offset = offsetof(struct sock, sk_lingertime);
    if (sk_lingertime_offset - gso_max_segs_offset == 4) {
        protocol = *(u8 *)((u64)&sk->sk_gso_max_segs - 3);
    } else {
        protocol = *(u8 *)((u64)&sk->sk_wmem_queued - 3);
    }
    return protocol;
}
{%- endmacro %}

{% macro net_filter_masks(filters, ip_to_int) -%}
// IPs and masks are given in integer notation with their dotted notation in the comment
{% for filter in filters %}
// {{ filter.get("description", filter["subnet_name"]) }}
#define subnet_{{ filter["subnet_name"] }} {{ ip_to_int(filter["network"]) }} // {{ filter["network"] }}
#define subnet_{{ filter["subnet_name"] }}_mask {{ ip_to_int(filter["network_mask"]) }} // {{ filter["network_mask"] }}
{% endfor %}
{%- endmacro %}

{% macro net_filter_if_excluded(filters, daddr_var='daddr', dport_var='dport') -%}
//
// For each filter, drop the packet iff
// - a filter's subnet matches AND
// - the port is not one of the filter's excepted ports AND
// - the port is one of the filter's included ports, if they exist
//
if (0 // for easier templating
{% for filter in filters -%}
    || (
        (
            subnet_{{ filter["subnet_name"] }}
            & subnet_{{ filter["subnet_name"] }}_mask
        ) == ({{ daddr_var }} & subnet_{{ filter["subnet_name"] }}_mask)
        {%- if filter.get('except_ports') %}
        && (1  // for easier templating
            {% for port in filter['except_ports'] -%}
            && ntohs({{ port }}) != {{ dport_var }}
            {%- endfor %}
        )
        {%- endif %}
        {%- if filter.get('include_ports') %}
        && (0  // for easier templating
            {% for port in filter['include_ports'] -%}
            || ntohs({{ port }}) == {{ dport_var }}
            {%- endfor %}
        )
        {%- endif %}
    )
{% endfor %})
{%- endmacro %}

{% macro include_exclude_ports(includeports, excludeports, port_var='dport') -%}
{% if includeports %}
if (1
{%- for port in includeports %}
    && {{ port }} != {{ port_var }}
{% endfor %})
{% else -%}
if (0
{%- for port in excludeports %}
    {% set port = port | string -%}
    {% if '-' in port -%}
        {%- set from_port, to_port = port.split('-') -%}
        || ({{ port_var }} >= {{ from_port }} && {{ port_var }} <= {{ to_port }})
    {%- else -%}
        || {{ port_var }} == {{ port }}
    {%- endif %}
{% endfor %})
{% endif -%}
{%- endmacro %}

{% macro net_filter_trie_init(prefix_filter_var_name, port_filter_var_name, size=512, max_ports=8) -%}
struct net_filter_key_t {
    u32 prefixlen;
    u32 data;
};

struct net_filter_port_range_t {
    u16 lower;
    u16 upper;
};

enum net_filter_mode { all = 0, exclude = 1, include = 2 };

struct net_filter_val_t {
    enum net_filter_mode mode;
    u8 ranges_size;
    struct net_filter_port_range_t ranges[{{ max_ports }}];
};

BPF_LPM_TRIE({{ prefix_filter_var_name }}, struct net_filter_key_t, struct net_filter_val_t, {{ size }});

BPF_ARRAY({{ port_filter_var_name }}, u8, 65536);  // element 0 stores mode flag (exclude / include)

// checks if the addr-port pairing is filtered
// `addr` is expected in 32 bit integer format
// `port` is expected in host byte order
static inline bool is_addr_port_filtered(u32 addr, u16 port) {
    struct net_filter_key_t filter_key = { .prefixlen = 32, .data = addr };
    struct net_filter_val_t* filter_val = {{ prefix_filter_var_name }}.lookup(&filter_key);
    if (filter_val != 0) {
        struct net_filter_port_range_t curr;
        if (filter_val->mode == all) {
            return true;
        }
        for (u8 i = 0; i < {{ max_ports }}; i++) {
            if (i >= filter_val->ranges_size) {
                break;
            }
            curr = filter_val->ranges[i];
            if (port >= curr.lower && port <= curr.upper) {
                // range match, addr-port is filtered if in "include" mode
                return filter_val->mode == include;
            }
        }
        // no port range matched, addr-port is filtered only if in "exclude" mode
        return filter_val->mode == exclude;
    }
    return false;
}

// check if port is filtered globally in the probe configuration
// `port` is expected in host byte order
static inline bool is_port_globally_filtered(u16 port) {
    int zero = 0, intport = (int)port;  // required cause array keys must be ints
    u8* mode = {{port_filter_var_name}}.lookup(&zero);
    u8* match = {{port_filter_var_name}}.lookup(&intport);
    return (
        (mode && match)  // we need to check the map pointers to make the compiler happy
        && ((*mode == exclude && *match) || (*mode == include && !*match))
    );
}
{%- endmacro %}

{% macro patch_buggy_headers(do_patch=False) -%}
{% if do_patch -%}
// This is just a work around to some issues with latest kernels:
// - https://github.com/iovisor/bcc/issues/3366
// - https://github.com/iovisor/bcc/issues/3993
struct bpf_timer {
    __u64 :64;
    __u64 :64;
};
enum {
    BPF_F_BROADCAST       = (1ULL << 3),
    BPF_F_EXCLUDE_INGRESS = (1ULL << 4),
};
// Missing header value in bcc <0.19.0 (Ubuntu Jammy comes with 0.18.0)
#define BPF_PSEUDO_FUNC 4
{%- endif %}
{%- endmacro %}

{% macro mntns_filter_init(mntns_filter_map_name, size=512) -%}

/* Original source: https://github.com/iovisor/bcc/blob/master/tools/mountsnoop.py#L32-L52
 * `struct mnt_namespace` is defined in fs/mount.h, which is private
 * to the VFS and not installed in any kernel-devel packages. So, let's
 * duplicate the important part of the definition. There are actually
 * more members in the real struct, but we don't need them, and they're
 * more likely to change.
 */
struct mnt_namespace {
    // This field was removed in https://github.com/torvalds/linux/commit/1a7b8969e664d6af328f00fe6eb7aabd61a71d13
    #if LINUX_VERSION_CODE < KERNEL_VERSION(5, 11, 0)
    atomic_t count;
    #endif
    struct ns_common ns;
};

BPF_HASH({{ mntns_filter_map_name }}, u64, bool, {{ size }});

static inline bool is_mntns_included() {
    struct task_struct *task;
    task = (struct task_struct *)bpf_get_current_task();
    u64 mntns_id = task->nsproxy->mnt_ns->ns.inum;
    return {{ mntns_filter_map_name }}.lookup(&mntns_id) != NULL;
}
{%- endmacro %}
