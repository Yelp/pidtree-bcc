{%- import 'utils.j2' as utils -%}
#include <net/sock.h>
#include <bcc/proto.h>

BPF_HASH(currsock, u32, struct sock*);
BPF_PERF_OUTPUT(events);

struct listen_bind_t {
    u32 pid;
    u32 laddr;
    u16 port;
    u8  protocol;
};

{{ utils.net_filter_trie_init(NET_FILTER_MAP_NAME, max_ports=NET_FILTER_MAX_PORT_RANGES) }}

{{ utils.get_proto_func() }}

static void net_listen_event(struct pt_regs *ctx)
{
    u32 pid = bpf_get_current_pid_tgid();
    struct sock** skp = currsock.lookup(&pid);
    if (skp == 0) return;
    int ret = PT_REGS_RC(ctx);
    if (ret != 0) {
        currsock.delete(&pid);
        return;
    }
    u32 laddr = 0;
    u16 port = 0;
    struct sock* sk = *skp;
    bpf_probe_read(&laddr, sizeof(u32), &sk->__sk_common.skc_rcv_saddr);
    bpf_probe_read(&port, sizeof(u16), &sk->__sk_common.skc_num);

    if (is_addr_port_filtered(laddr, port)) {
        currsock.delete(&pid);
        return;
    }

    {% if includeports or excludeports -%}
    {{ utils.include_exclude_ports(includeports, excludeports, 'port') | indent(4) }} {
        currsock.delete(&pid);
        return;
    }
    {%- endif %}

    {% if net_namespace -%}
    if (sk->__sk_common.skc_net.net->ns.inum != {{ net_namespace }}) {
        currsock.delete(&pid);
        return;
    }
    {%- endif %}

    struct listen_bind_t listen = {};
    listen.pid = pid;
    listen.port = port;
    listen.laddr = laddr;
    listen.protocol = get_socket_protocol(sk);
    events.perf_submit(ctx, &listen, sizeof(listen));
    currsock.delete(&pid);
}

{% if 'udp' in protocols -%}
int kprobe__inet_bind(
    struct pt_regs *ctx,
    struct socket *sock,
    const struct sockaddr *addr,
    int addrlen)
{
    {% if exclude_random_bind -%}
    struct sockaddr_in* inet_addr = (struct sockaddr_in*)addr;
    if (inet_addr->sin_port == 0) {
        return 0;
    }
    {% endif -%}
    struct sock* sk = sock->sk;
    u8 protocol = get_socket_protocol(sk);
    if (sk->__sk_common.skc_family == AF_INET && protocol == IPPROTO_UDP) {
        u32 pid = bpf_get_current_pid_tgid();
        currsock.update(&pid, &sk);
    }
    return 0;
}

int kretprobe__inet_bind(struct pt_regs *ctx)
{
    net_listen_event(ctx);
    return 0;
}
{%- endif %}

{% if 'tcp' in protocols -%}
int kprobe__inet_listen(struct pt_regs *ctx, struct socket *sock, int backlog)
{
    struct sock* sk = sock->sk;
    if (sk->__sk_common.skc_family == AF_INET) {
        u32 pid = bpf_get_current_pid_tgid();
        currsock.update(&pid, &sk);
    }
    return 0;
}

int kretprobe__inet_listen(struct pt_regs *ctx)
{
    net_listen_event(ctx);
    return 0;
}
{% endif -%}
